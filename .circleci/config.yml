version: 2.1
commands:
  save_gradle_cache:
    steps:
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-repo-v1-{{ .Branch }}-{{ checksum "build.gradle" }}
  restore_gradle_cache:
    steps:
      - restore_cache:
          keys:
            - gradle-repo-v1-{{ .Branch }}-{{ checksum "build.gradle" }}
            - gradle-repo-v1-{{ .Branch }}-
            - gradle-repo-v1-

references:

  workspace_root: &workspace_root
                    /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  compile-and-test:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    steps:
      - checkout
      - restore_gradle_cache
      - run: gradle test
      - save_gradle_cache

  tag-git-version:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_gradle_cache
      - run:
          name: Get Release Scope
          command: |
            COMMIT_MSG=$(git log --format=%B -n 1 $CIRCLE_SHA1)
            if [[ $COMMIT_MSG == fix* ]]; then
                SCOPE="patch"
            fi
            if [[ $COMMIT_MSG == feat* ]]; then
                SCOPE="minor"
            fi
            if [[ $COMMIT_MSG == release* ]]; then
                SCOPE="major"
            fi
            if [ -z "$SCOPE" ]; then
                echo "The commit message must begin with one of the following keywords: fix, feat, release"
                exit 1
            fi
            gradle final -Prelease.scope=$SCOPE
      - save_gradle_cache

  build-docker-image:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_gradle_cache
      - run: gradle clean build docker
      - save_gradle_cache
      - run:
          name: Archive Docker image
          command: |
            docker save -o image.tar $DOCKERHUB_USERNAME/$CIRCLE_PROJECT_REPONAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  publish-docker-image:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - *attach_workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            IMAGE_NAME=$DOCKERHUB_USERNAME/$CIRCLE_PROJECT_REPONAME
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  checkout-infra-script:
    docker:
      - image: circleci/circleci-cli
        environment:
          WS_DIR: *workspace_root
    steps:
      - checkout
      - run:
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com -p 22 >> ~/.ssh/known_hosts
            mkdir -p ${WS_DIR}/circle-ci-infra-test
            git clone git@github.com:kcheranev/circle-ci-infra-test.git ${WS_DIR}/circle-ci-infra-test
            ls ${WS_DIR}
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - circle-ci-infra-test

  deploy:
    docker:
      - image: hashicorp/terraform:0.12.0
        environment:
          WS_DIR: *workspace_root
    steps:
      - *attach_workspace
      - run: ls ${WS_DIR}
      - run:
          command: |
            cd ${WS_DIR}/circle-ci-infra-test
            terraform init
            terraform apply -auto-approve -state=terraform.x-sell --var="token=${K8S_TOKEN}" --var="k8s_host=${K8S_HOST}"

workflows:
  version: 2
  pr-build:
    jobs:
      - compile-and-test
      - tag-git-version:
          requires:
            - compile-and-test
          filters:
            branches:
              only: master
  deploy:
    jobs:
      - build-docker-image:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - publish-docker-image:
          requires:
            - build-docker-image
      - checkout-infra-script:
          requires:
            - publish-docker-image
      - deploy:
        requires:
          - checkout-infra-script